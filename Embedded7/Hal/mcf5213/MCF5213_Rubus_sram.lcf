# Sample Linker Command File for CodeWarrior for ColdFire

KEEP_SECTION {.vectorTable}

# Memory ranges	

MEMORY {
	flash       (RX)	: ORIGIN = 0x00000000, LENGTH = 0x00040000
	vector      (RX)	: ORIGIN = 0x20000000, LENGTH = 0x00000400
	ram         (RWX)	: ORIGIN = 0x20000000, LENGTH = 0x00008000
	sram        (RWX)   : ORIGIN = 0x20000400, LENGTH = 0x00007A00
	stack       (RW)    : ORIGIN = 0x20007F00, LENGTH = 0x00000100
}

SECTIONS {

# Memory Mapped Registers (IPSBAR= 0x40000000)
   ___IPSBAR         = 0x40000000;

# 32 Kbytes Internal SRAM
   ___RAMBAR         = 0x20000000;
   ___RAMBAR_SIZE    = 0x00008000;

# 256 KByte Internal Flash Memory
   ___FLASHBAR       = 0x00000000;
   ___FLASHBAR_SIZE  = 0x00040000;

# Start up Stack
   ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;

	.flash		: {} > flash
	.vector		: {} > vector
	.ram		: {} > ram
	.sram		: {} > sram
   
 
   ___FLASH		     = ADDR(flash);
   ___FLASH_SIZE	 = 0x00040000;
   ___SRAM		     = ADDR(ram);
   ___SRAM_SIZE	     = 0x00008000;
	
	.vectors :
	{
		hal_vector.c(.vectorTable)
		. = ALIGN (0x4); 
	} >> vector


	.text :
	{
		*(.text)
		. = ALIGN (0x4);
		*(.rodata)
		. = ALIGN (0x4);		
		___ROM_AT = .;
		___DATA_ROM = .;
	} >> sram

	.data : AT(___ROM_AT) 
	{  
		___DATA_RAM = .;
		. = ALIGN(0x4);
		
		___sinit__ = .;
	    STATICINIT
		__START_DATA = .;

		*(.data)
		. = ALIGN (0x4);
		__END_DATA = .;

		__START_SDATA = .;
		*(.sdata)
		. = ALIGN (0x4);
		__END_SDATA = .;

		___DATA_END = .;
		__SDA_BASE = .;
		. = ALIGN (0x4);
	} >> sram

	.bss :
	{
		___BSS_START = .;
		__START_SBSS = .;
		*(.sbss)
		. = ALIGN (0x4);
		*(SCOMMON)
		__END_SBSS = .;

		__START_BSS = .;
		*(.bss)
		. = ALIGN (0x4);
		*(COMMON)
		__END_BSS = .;
		___BSS_END = .;

		. = ALIGN(0x4);
	} >> sram

	.custom :
	{
		___SP_END		= ADDR(stack);
		___SP_INIT		= ___SP_AFTER_RESET;

		. = ALIGN (0x4);
	} >> ram
  	
	
	__SP_INIT		= ___SP_INIT;
	___stack_safety = 16;

	_romp_at = ___ROM_AT + SIZEOF(.data);
	.romp : AT(_romp_at)
	{
		__S_romp = _romp_at;
		WRITEW(___ROM_AT);
		WRITEW(ADDR(.data));
		WRITEW(SIZEOF(.data));
		WRITEW(0);
		WRITEW(0);
		WRITEW(0);
	}

}
